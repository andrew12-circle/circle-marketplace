-- Create goal_plans table to store AI plans generated by the edge function
create table if not exists public.goal_plans (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null,
  goal_title text not null,
  goal_description text,
  timeframe_weeks integer,
  budget_min numeric,
  budget_max numeric,
  kpis text[],
  plan jsonb not null,
  recommended_service_ids uuid[],
  confidence numeric,
  model_used text,
  status text not null default 'draft',
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- RLS
alter table public.goal_plans enable row level security;

-- Policies
create policy if not exists "Users can view their own goal plans"
  on public.goal_plans for select
  using (auth.uid() = user_id);

create policy if not exists "Users can create their own goal plans"
  on public.goal_plans for insert
  with check (auth.uid() = user_id);

create policy if not exists "Users can update their own goal plans"
  on public.goal_plans for update
  using (auth.uid() = user_id);

create policy if not exists "Users can delete their own goal plans"
  on public.goal_plans for delete
  using (auth.uid() = user_id);

-- Updated_at trigger
create or replace function public.update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger trg_goal_plans_updated_at
before update on public.goal_plans
for each row execute function public.update_updated_at_column();

-- Indexes
create index if not exists idx_goal_plans_user_id on public.goal_plans(user_id);
create index if not exists idx_goal_plans_created_at on public.goal_plans(created_at desc);
